// <auto-generated />
using System;
using JobOverview.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobOverview.Data.Migrations
{
    [DbContext(typeof(ContexteJobOverview))]
    [Migration("20240422073702_AjoutColonneJetonTache")]
    partial class AjoutColonneJetonTache
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobOverview.Entities.Activite", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Code");

                    b.ToTable("Activites");
                });

            modelBuilder.Entity("JobOverview.Entities.ActiviteMetier", b =>
                {
                    b.Property<string>("CodeActivite")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeMetier")
                        .HasColumnType("varchar(20)");

                    b.HasKey("CodeActivite", "CodeMetier");

                    b.HasIndex("CodeMetier");

                    b.ToTable("ActivitesMetiers");
                });

            modelBuilder.Entity("JobOverview.Entities.Equipe", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeFiliere")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeService")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Code");

                    b.HasIndex("CodeFiliere");

                    b.HasIndex("CodeService");

                    b.ToTable("Equipes");
                });

            modelBuilder.Entity("JobOverview.Entities.Filiere", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Code");

                    b.ToTable("Filieres");
                });

            modelBuilder.Entity("JobOverview.Entities.Logiciel", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeFiliere")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Code");

                    b.HasIndex("CodeFiliere");

                    b.ToTable("Logiciels");
                });

            modelBuilder.Entity("JobOverview.Entities.Metier", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeService")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Code");

                    b.HasIndex("CodeService");

                    b.ToTable("Metiers");
                });

            modelBuilder.Entity("JobOverview.Entities.Module", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeLogiciel")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeLogicielParent")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeModuleParent")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Code", "CodeLogiciel");

                    b.HasIndex("CodeLogiciel");

                    b.HasIndex("CodeModuleParent", "CodeLogicielParent");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("JobOverview.Entities.Personne", b =>
                {
                    b.Property<string>("Pseudo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeEquipe")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeMetier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Manager")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("TauxProductivite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(1m);

                    b.HasKey("Pseudo");

                    b.HasIndex("CodeEquipe");

                    b.HasIndex("CodeMetier");

                    b.HasIndex("Manager");

                    b.ToTable("Personnes");
                });

            modelBuilder.Entity("JobOverview.Entities.Release", b =>
                {
                    b.Property<short>("Numero")
                        .HasColumnType("smallint");

                    b.Property<float>("NumeroVersion")
                        .HasColumnType("real");

                    b.Property<string>("CodeLogiciel")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly>("DatePubli")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Numero", "NumeroVersion", "CodeLogiciel");

                    b.HasIndex("NumeroVersion", "CodeLogiciel");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("JobOverview.Entities.Service", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Code");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("JobOverview.Entities.Tache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeActivite")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeLogiciel")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodeModule")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("DureePrevue")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<decimal>("DureeRestante")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<float>("NumVersion")
                        .HasColumnType("real");

                    b.Property<string>("Personne")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("Vers")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CodeActivite");

                    b.HasIndex("Personne");

                    b.HasIndex("CodeModule", "CodeLogiciel");

                    b.HasIndex("NumVersion", "CodeLogiciel");

                    b.ToTable("Taches");
                });

            modelBuilder.Entity("JobOverview.Entities.Travail", b =>
                {
                    b.Property<DateOnly>("DateTravail")
                        .HasColumnType("date");

                    b.Property<int>("IdTache")
                        .HasColumnType("int");

                    b.Property<decimal>("Heures")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<decimal>("TauxProductivite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3, 2)")
                        .HasDefaultValue(1m);

                    b.HasKey("DateTravail", "IdTache");

                    b.HasIndex("IdTache");

                    b.ToTable("Travaux");
                });

            modelBuilder.Entity("JobOverview.Entities.Version", b =>
                {
                    b.Property<float>("Numero")
                        .HasColumnType("real");

                    b.Property<string>("CodeLogiciel")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly>("DateOuverture")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateSortiePrevue")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateSortieReelle")
                        .HasColumnType("date");

                    b.Property<short>("Millesime")
                        .HasColumnType("smallint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Numero", "CodeLogiciel");

                    b.HasIndex("CodeLogiciel");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("JobOverview.Entities.ActiviteMetier", b =>
                {
                    b.HasOne("JobOverview.Entities.Activite", null)
                        .WithMany()
                        .HasForeignKey("CodeActivite")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobOverview.Entities.Metier", null)
                        .WithMany()
                        .HasForeignKey("CodeMetier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOverview.Entities.Equipe", b =>
                {
                    b.HasOne("JobOverview.Entities.Filiere", null)
                        .WithMany()
                        .HasForeignKey("CodeFiliere")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobOverview.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("CodeService")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JobOverview.Entities.Logiciel", b =>
                {
                    b.HasOne("JobOverview.Entities.Filiere", null)
                        .WithMany()
                        .HasForeignKey("CodeFiliere")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOverview.Entities.Metier", b =>
                {
                    b.HasOne("JobOverview.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("CodeService")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOverview.Entities.Module", b =>
                {
                    b.HasOne("JobOverview.Entities.Logiciel", null)
                        .WithMany("Modules")
                        .HasForeignKey("CodeLogiciel")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobOverview.Entities.Module", null)
                        .WithMany("SousModules")
                        .HasForeignKey("CodeModuleParent", "CodeLogicielParent")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("JobOverview.Entities.Personne", b =>
                {
                    b.HasOne("JobOverview.Entities.Equipe", null)
                        .WithMany("Personnes")
                        .HasForeignKey("CodeEquipe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobOverview.Entities.Metier", "Metier")
                        .WithMany()
                        .HasForeignKey("CodeMetier")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobOverview.Entities.Personne", null)
                        .WithMany()
                        .HasForeignKey("Manager")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Metier");
                });

            modelBuilder.Entity("JobOverview.Entities.Release", b =>
                {
                    b.HasOne("JobOverview.Entities.Version", null)
                        .WithMany("Releases")
                        .HasForeignKey("NumeroVersion", "CodeLogiciel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOverview.Entities.Tache", b =>
                {
                    b.HasOne("JobOverview.Entities.Activite", null)
                        .WithMany()
                        .HasForeignKey("CodeActivite")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobOverview.Entities.Personne", null)
                        .WithMany()
                        .HasForeignKey("Personne")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobOverview.Entities.Module", null)
                        .WithMany()
                        .HasForeignKey("CodeModule", "CodeLogiciel")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobOverview.Entities.Version", null)
                        .WithMany()
                        .HasForeignKey("NumVersion", "CodeLogiciel")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOverview.Entities.Travail", b =>
                {
                    b.HasOne("JobOverview.Entities.Tache", null)
                        .WithMany("Travaux")
                        .HasForeignKey("IdTache")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOverview.Entities.Version", b =>
                {
                    b.HasOne("JobOverview.Entities.Logiciel", null)
                        .WithMany("Versions")
                        .HasForeignKey("CodeLogiciel")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("JobOverview.Entities.Equipe", b =>
                {
                    b.Navigation("Personnes");
                });

            modelBuilder.Entity("JobOverview.Entities.Logiciel", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("JobOverview.Entities.Module", b =>
                {
                    b.Navigation("SousModules");
                });

            modelBuilder.Entity("JobOverview.Entities.Tache", b =>
                {
                    b.Navigation("Travaux");
                });

            modelBuilder.Entity("JobOverview.Entities.Version", b =>
                {
                    b.Navigation("Releases");
                });
#pragma warning restore 612, 618
        }
    }
}
